class Solution {
public:
    int solve(string s,string t)
    {
        int n=s.length();int m=t.length();
        int i,j;
        int dp[n+1][m+1];
        for(i=0;i<=n;i++)
            dp[i][0]=0;
        for(i=0;i<=m;i++)
            dp[0][i]=0;
        for(i=1;i<=n;i++)
        {
            for(j=1;j<=m;j++)
            {
                if(s[i-1]==t[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
    bool isSubsequence(string s, string t) {
        int x=solve(s,t);
        cout<<x;
        if(x==s.length())
            return true;
        return false;
    }
};
