class Solution {
public:
    int MAH(int ar[],int n)
    {
        vector<int> l,r;
        stack<pair<int,int>> s;
        l.push_back(0);s.push({ar[1],1});
        int i=2;
        while(i<=n)
        {
            while(!s.empty()&&s.top().first>=ar[i])
            {
                s.pop();
            }
            if(s.empty())
            {
                l.push_back(0);
            }
            else
            {
                l.push_back(s.top().second);
            }
            s.push({ar[i],i});
            i++;
        }
        stack<pair<int,int>> s1;
        r.push_back(n+1);s1.push({ar[n],n});
        i=n-1;
        while(i>=1)
        {
            while(!s1.empty()&&s1.top().first>=ar[i])
            {
                s1.pop();
            }
            if(s1.empty())
            {
                r.push_back(n+1);
            }
            else
                r.push_back(s1.top().second);
            s1.push({ar[i],i});
            i--;
        }
        reverse(r.begin(),r.end());
        int maxi=0;
        for(i=1;i<=n;i++)
        {
            maxi=max(maxi,ar[i]*(r[i-1]-l[i-1]-1));
        }
        cout<<endl;
        return maxi;
    }
    int maximalRectangle(vector<vector<char>>& m) {
        int n=m.size();
        if(n==0)
            return 0;
        int c=m[0].size();
        int ar[c+5];
        memset(ar,0,sizeof(ar));
        int i,j,ans=0;
        for(i=1;i<=n;i++)
        {
            for(j=1;j<=c;j++)
            {
                if(m[i-1][j-1]=='0')
                    ar[j]=0;
                else
                    ar[j]=1+ar[j];
            }
            ans=max(ans,MAH(ar,c));
        }
        return ans;
    }
};
